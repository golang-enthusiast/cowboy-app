// Code generated by MockGen. DO NOT EDIT.
// Source: cowboy-app/internal/domain (interfaces: QueueService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "cowboy-app/internal/domain"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockQueueService is a mock of QueueService interface
type MockQueueService struct {
	ctrl     *gomock.Controller
	recorder *MockQueueServiceMockRecorder
}

// MockQueueServiceMockRecorder is the mock recorder for MockQueueService
type MockQueueServiceMockRecorder struct {
	mock *MockQueueService
}

// NewMockQueueService creates a new mock instance
func NewMockQueueService(ctrl *gomock.Controller) *MockQueueService {
	mock := &MockQueueService{ctrl: ctrl}
	mock.recorder = &MockQueueServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQueueService) EXPECT() *MockQueueServiceMockRecorder {
	return m.recorder
}

// SendMessage mocks base method
func (m *MockQueueService) SendMessage(arg0 context.Context, arg1 string, arg2 domain.QueueMessage) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage
func (mr *MockQueueServiceMockRecorder) SendMessage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockQueueService)(nil).SendMessage), arg0, arg1, arg2)
}
